import React from 'react';
import { History } from 'history';
interface Props {
    promise: () => void | Array<Promise<Function>>;
    children: React.ReactNode;
    history: History;
    guardData?: object;
}
declare type State = {
    data: object;
    resolvedSuccess: boolean;
};
declare class AsyncComponent extends React.Component<Props, State> {
    chains: any;
    static defaultProps: {
        guardData: {};
    };
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    renderChildren(): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>[];
    render(): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>[] | JSX.Element;
}
export default AsyncComponent;
